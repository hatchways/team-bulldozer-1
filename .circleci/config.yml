version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/node:10.22 # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      - run:
          name: update-npm
          command: "sudo npm install -g n mocha eslint"
      - run:
          name: update-npm
          command: "sudo n stable"
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "server/package.json" }}
      - run:
          name: install-npm-wee
          command: cd server && npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "server/package.json" }}
          paths:
            - server/node_modules
      - run:
          name: export-linter-result
          command: |
            cd server
            mkdir -p ./reports
            eslint ./src --format junit --output-file ./reports/eslint.xml
          when: always
      - run:
          name: export-test-result
          command: |
            cd server
            mkdir -p ./reports
            mocha ./src/**/*.spec.js --reporter ./node_modules/mocha-junit-reporter --exit --timeout 30000 --reporter-options mochaFile=./reports/mocha.xml
          when: always
      - store_test_results:
          path: ./server/src/coverage
          when: always
      - store_test_results:
          path: ./server/reports
          when: always
      - store_artifacts:
          path: ./server/src/coverage
          destination: coverage
          when: always
      - store_artifacts:
          path: ./server/reports
          destination: reports
          when: always
      - run: # run tests
          name: test
          command: cd server && npm run start:test
      - run: # run build
          name: build
          command: cd server && npm run build
      - store_artifacts:
          path: ./server/build
          destination: circleci-build